/*
 * generated by Xtext 2.12.0
 */
package de.jugh.jvmmodel

import com.google.inject.Inject
import de.jugh.arkanoidDsl.Brick
import de.jugh.arkanoidDsl.GameContentProvider
import de.jugh.arkanoidDsl.RowCreator
import java.util.List
import org.eclipse.emf.common.util.EList
import org.eclipse.xtext.common.types.JvmDeclaredType
import org.eclipse.xtext.xbase.XExpression
import org.eclipse.xtext.xbase.jvmmodel.AbstractModelInferrer
import org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder
import de.jugh.generator.IRowGenerator

/**
 * <p>Infers a JVM model from the source model.</p> 
 * 
 * <p>The JVM model should contain all elements that would appear in the Java code 
 * which is generated from the source model. Other models link against the JVM model rather than the source model.</p>     
 */
class ArkanoidDslJvmModelInferrer extends AbstractModelInferrer {

	/**
	 * convenience API to build and initialize JVM types and their members.
	 */
	@Inject extension JvmTypesBuilder

	/**
	 * The dispatch method {@code infer} is called for each instance of the
	 * given element's type that is contained in a resource.
	 * 
	 * @param element
	 *            the model to create one or more
	 *            {@link JvmDeclaredType declared
	 *            types} from.
	 * @param acceptor
	 *            each created
	 *            {@link JvmDeclaredType type}
	 *            without a container should be passed to the acceptor in order
	 *            get attached to the current resource. The acceptor's
	 *            {@link IJvmDeclaredTypeAcceptor#accept(org.eclipse.xtext.common.types.JvmDeclaredType)
	 *            accept(..)} method takes the constructed empty type for the
	 *            pre-indexing phase. This one is further initialized in the
	 *            indexing phase using the lambda you pass as the last argument.
	 * @param isPreIndexingPhase
	 *            whether the method is called in a pre-indexing phase, i.e.
	 *            when the global index is not yet fully updated. You must not
	 *            rely on linking using the index if isPreIndexingPhase is
	 *            <code>true</code>.
	 */
	def dispatch void infer(GameContentProvider element, IJvmDeclaredTypeAcceptor acceptor,
		boolean isPreIndexingPhase) {

		inferRowCreator(element, acceptor);
	}

	def void inferRowCreator(GameContentProvider element, IJvmDeclaredTypeAcceptor acceptor) {
		if (element === null) {
			return;
		}

		val creator = element.rowCreators;
		if (creator === null || creator.empty) {
			return;
		}

		acceptor.accept(element.toClass("de.jugh.RowCreators")) [clazz |
			clazz.superTypes += typeRef(IRowGenerator)
			creator.forEach [
				val rowCreatorDef = it as RowCreator;

				val method = element.toMethod(rowCreatorDef.name, typeRef(List, typeRef("de.jugh.content.Brick"))) [
					body = rowCreatorDef.creator
				]

				clazz.members+=method;
			]
		]
	}
}
